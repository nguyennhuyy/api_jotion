generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  fullname String
  password String
  role     String @default("admin")
}

model Documents {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  content     String?
  coverImage  String?
  createdAt   DateTime           @db.Date
  icon        String?
  isArchived  Boolean?
  isPublished Boolean?
  title       String
  updatedAt   DateTime           @db.Date
  userId      String
  comment     DocumentsComment[]

  @@index([userId])
}

model DocumentsComment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  documents  Documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String    @db.ObjectId
  content    String
  createdAt  DateTime  @default(now()) @db.Date
  updatedAt  DateTime  @default(now()) @db.Date
}

model GeneratorOtp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  email     String
  otp       String
  type      String
  updatedAt DateTime @db.Date
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String?
  createdAt DateTime @db.Date
  email     String   @unique
  avatar    String?
  fullname  String
  password  String
  phone     String?
  userId    String?
  typeLogin String?  @default("default")
  updatedAt DateTime @db.Date

  @@index([fullname, email])
}

model WorkBoard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  userId     String
  imageThumb String?
  workList   WorkList[]
  createdAt  DateTime   @default(now()) @db.Date
  updatedAt  DateTime   @default(now()) @db.Date
}

model WorkList {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  order     Int?
  userId    String
  cards     WorkCard[] @relation("WorkList")
  board     WorkBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String     @db.ObjectId
  createdAt DateTime   @default(now()) @db.Date
  updatedAt DateTime   @default(now()) @db.Date

  @@index([id, boardId])
}

model WorkCard {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  avatar     String?
  order      Int?
  tags       String[]
  date       DateTime?
  workList   WorkList? @relation("WorkList", fields: [workListId], references: [id])
  workListId String    @db.ObjectId
  userId     String?
  isSendMail Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Date
  updatedAt  DateTime  @default(now()) @db.Date

  @@index([date, id, workListId])
}

model MessageGroup {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  userId         String[] //userId[0]: is user create, userId[1]: is user receive
  messageGroupId Message[]
  createdAt      DateTime  @default(now()) @db.Date
  updatedAt      DateTime  @default(now()) @db.Date
}

model Message {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  status    String       @default("active")
  type      String       @default("text")
  userId    String
  message   String
  group     MessageGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String       @db.ObjectId
  createdAt DateTime     @default(now()) @db.Date
  updatedAt DateTime     @default(now()) @db.Date
}
